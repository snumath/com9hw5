#--------------------------------------------------------------
# 
#  Project #5: Optimizing performance on a pipelined processor
#
#  June 5, 2018
#
#  Jin-Soo Kim (jinsoo.kim@snu.ac.kr)
#  Systems Software & Architecture Laboratory
#  Dept. of Computer Science and Engineering
#  Seoul National University
#
#--------------------------------------------------------------

# bmp_grid() starts here
	.pos	0x400
	.align 8
bmp_grid:
	# imgptr is in %rdi
	# width  is in %rsi
	# height is in %rdx
	# gap	 is in %rcx
    # ----------------------------------------------------

	# FILL HERE 

	irmovq	$0x03, %r13
	irmovq	$0xfffffffffffffffc, %r12
	irmovq	$0x01, %r11
	irmovq	$0x00, %r10
	irmovq	$0xff, %r8

	pushq	%rsi
	pushq	%rdx

	rrmovq	%rsi, %rax
	addq	%rsi, %rax
	addq	%rsi, %rax

	addq	%r13, %rax
	andq	%r12, %rax

	pushq	%rax

	mulq	%rdx, %rax

	subq	%rcx, %rax
	subq	%rcx, %rax
	subq	%rcx, %rax

	mrmovq	(%rsp), %r14
	mrmovq	8(%rsp), %r12


L2:
	rmmovb	%r10, (%rdi)
	rmmovb	%r10, 1(%rdi)
	rmmovb	%r8, 2(%rdi)
	addq	%r14, %rdi
	subq	%r11, %rdx		# %rdx--
	jg		L2


	rrmovq	%r12, %rdx	# %rdx = height
	subq	%rax, %rdi
	subq	%rcx, %rsi		# %rsi -= gap
	jg		L2

	#################################################
	#		여기 밑에부터 밥먹고 합시다 ^~^			#
	#################################################


	rrmovq	%rax, %rbx
	addq	%rbx, %rdi

	mrmovq	(%rsp), %rbx
	subq	%rbx, %rdi

	subq	%r13, %rdi

	addq	%rsi, %rdi
	addq	%rsi, %rdi
	addq	%rsi, %rdi

	addq	%rcx, %rdi
	addq	%rcx, %rdi
	addq	%rcx, %rdi

	mrmovq	(%rsp), %rax
	mulq	%rcx, %rax

	mrmovq	16(%rsp), %rbx
	subq	%rbx, %rax
	subq	%rbx, %rax
	subq	%rbx, %rax

	pushq	%rax

	mrmovq	16(%rsp), %rdx	# %rdx = height
	mrmovq	24(%rsp), %rsi	# %rsi = width

	mrmovq	(%rsp), %rbx
	mrmovq	24(%rsp), %r12


L3:
	rmmovb	%r10, (%rdi)
	rmmovb	%r10, 1(%rdi)
	rmmovb	%r8, 2(%rdi)
	subq	%r13, %rdi		# (k,l) -> (k-1,l)
	subq	%r11, %rsi
	jg		L3

	rrmovq	%r12, %rsi	# %rsi = width
	subq	%rbx, %rdi	# (end,l) -> (end,l-gap)
	subq	%rcx, %rdx		# %rdx -= gap
	jg		L3


	mrmovq	16(%rsp), %rdx	# %rdx = height
	

    # ----------------------------------------------------------
	# NOTE: The code size is limited to 1024 bytes. 
    # The addresses of all instructions must be within 0x800.
    # ----------------------------------------------------------
	popq	%rax
	popq	%rax
	popq	%rdx
	popq	%rsi
	ret
